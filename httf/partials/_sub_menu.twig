{# This file might seem a little complex, because of the high density of tags.
   It uses Twig macros and ternary selectors. Read up on them, if required:
   macros: http://twig.sensiolabs.org/doc/templates.html#macros
   ternary operators: http://twig.sensiolabs.org/doc/templates.html#other-operators
#}

{# Make sure the setting for the submenus is defined. #}
{% if withsubmenus is not defined %}
    {% set withsubmenus = true %}
{% endif %}

{# The 'recursive' macro, for inserting one menu item. If it has a submenu, it
   invokes itself to insert the items of the submenus. #}
{% macro display_menu_item(item, loop, extraclass, withsubmenus) %}
    {% from _self import display_menu_item %}
    {% spaceless %}
    {% if item.submenu is defined and withsubmenus or item.list|default(false) %}
        {% set hassubmenus = true %}
    {% else %}
        {% set hassubmenus = false %}
    {% endif %}
    <li class="index-{{ loop.index -}}
        {{ item.path|default('') == 'homepage' ? ' nav-item' -}}
        {{ loop.first ? ' first' -}}
        {{ loop.last ? ' last' -}}
        {{ hassubmenus ? ' nav-item dropdown' -}}
        {{ item|current ? ' active' }}">

        <a title='{{ item.title|default('')|escape }}' class='nav-link {{ item.class|default('') }}
        {{ hassubmenus ? ' dropdown-toggle' -}}' 
        {% if hassubmenus %}
            href="#" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"
        {% else %}
            href="{{ item.link }}"
        {% endif %}>
            {{- item.label|default('-') -}}
        </a>

        {% set list = [] %}
        {% if item.submenu is defined and withsubmenus %}
            <ul class="dropdown-menu dropdown-menu-right">
                {% for submenu in item.submenu %}
                    {{ display_menu_item(submenu, loop, 'dropdown-item') }}
                {% endfor %}
            </ul>
        {% elseif item.list|default(false) %}
            {% setcontent listedcontent = item.list.contenttype where item.list.where %}
            {% for listitem in listedcontent %}
                {% set list = list|merge([{title: listitem.title, link: listitem.link, label: listitem.title}]) %}
            {% endfor %}
            {% if list is not empty %}
            <ul class="dropdown-menu glass" aria-labelledby="navbar{{ item.class }}">
                {% for submenu in list %}
                 {{ display_menu_item(submenu, loop, 'dropdown-item') }}
                {% endfor %}
            </ul>
            {% endif %}
        {% endif %}
    </li>
    {% endspaceless %}
{% endmacro %}

{# Make the macro available for use #}
{% from _self import display_menu_item %}

{# The main menu loop: Iterates over the items, calling `display_menu_item` #}
<ul class="navbar-nav {{ class|default('') }} flex-md-row flex-column">
{% for item in menu %}
    {% if item.label is defined %}
        {{ display_menu_item(item, loop, '', withsubmenus) }}
    {% endif %}
{% endfor %}
</ul>

